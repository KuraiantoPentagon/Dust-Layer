#!/bin/bash

set -x

ORG_ID="$1"

npx supabase projects list || npx supabase login

# Check if ORG_ID is empty
if [ -z "$ORG_ID" ]; then
  npx supabase orgs list
  echo "Error: ORG_ID is required."
  exit 1
fi

npx supabase projects list || npx supabase login

export PROJECT_ID=`npx supabase projects list -o json | jq -r --arg ORG_ID "$ORG_ID" '.[] | select(.organization_id == $ORG_ID) | .id'`

# Declare associative array to hold all API keys
declare -A api_keys

# Populate the associative array
while IFS= read -r key; do
  name=$(echo "$key" | jq -r '.name')
  api_key=$(echo "$key" | jq -r '.api_key')
  api_keys["SUPABASE_API_KEY_$name"]=$api_key
done < <(npx supabase projects api-keys --project-ref "$PROJECT_ID" -o json | jq -c '.[]')

# Build the argument list for kubectl
secret_args="--from-literal=SUPABASE_PROJECT_URL=https://$PROJECT_ID.supabase.co "
for k in "${!api_keys[@]}"; do
  secret_args+="--from-literal=$k=${api_keys[$k]} "
done

# Create or update the secret in Kubernetes
eval "kubectl create secret generic supabase-api-keys --dry-run=client -o yaml $secret_args" | kubectl apply -f -

# Output project URL
echo "https://$PROJECT_ID.supabase.co"
